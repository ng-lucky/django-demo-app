[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "PageNumberPagination",
        "importPath": "rest_framework.pagination",
        "description": "rest_framework.pagination",
        "isExtraImport": true,
        "detail": "rest_framework.pagination",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "dj_database_url",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dj_database_url",
        "description": "dj_database_url",
        "detail": "dj_database_url",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.conf.urls",
        "description": "django.conf.urls",
        "isExtraImport": true,
        "detail": "django.conf.urls",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "viewsets",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "DefaultRouter",
        "importPath": "rest_framework.routers",
        "description": "rest_framework.routers",
        "isExtraImport": true,
        "detail": "rest_framework.routers",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "ResultsPagination",
        "importPath": "demo_app.pagination",
        "description": "demo_app.pagination",
        "isExtraImport": true,
        "detail": "demo_app.pagination",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "permission_classes",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "AllowAny",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {}
    },
    {
        "label": "dispatcher",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {}
    },
    {
        "label": "Token",
        "importPath": "rest_framework.authtoken.models",
        "description": "rest_framework.authtoken.models",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken.models",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "HTTP_101_SWITCHING_PROTOCOLS",
        "importPath": "rest_framework.status",
        "description": "rest_framework.status",
        "isExtraImport": true,
        "detail": "rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_201_CREATED",
        "importPath": "rest_framework.status",
        "description": "rest_framework.status",
        "isExtraImport": true,
        "detail": "rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_100_CONTINUE",
        "importPath": "rest_framework.status",
        "description": "rest_framework.status",
        "isExtraImport": true,
        "detail": "rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_200_OK",
        "importPath": "rest_framework.status",
        "description": "rest_framework.status",
        "isExtraImport": true,
        "detail": "rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_203_NON_AUTHORITATIVE_INFORMATION",
        "importPath": "rest_framework.status",
        "description": "rest_framework.status",
        "isExtraImport": true,
        "detail": "rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_304_NOT_MODIFIED",
        "importPath": "rest_framework.status",
        "description": "rest_framework.status",
        "isExtraImport": true,
        "detail": "rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_204_NO_CONTENT",
        "importPath": "rest_framework.status",
        "description": "rest_framework.status",
        "isExtraImport": true,
        "detail": "rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_400_BAD_REQUEST",
        "importPath": "rest_framework.status",
        "description": "rest_framework.status",
        "isExtraImport": true,
        "detail": "rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_400_BAD_REQUEST",
        "importPath": "rest_framework.status",
        "description": "rest_framework.status",
        "isExtraImport": true,
        "detail": "rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_404_NOT_FOUND",
        "importPath": "rest_framework.status",
        "description": "rest_framework.status",
        "isExtraImport": true,
        "detail": "rest_framework.status",
        "documentation": {}
    },
    {
        "label": "HTTP_500_INTERNAL_SERVER_ERROR",
        "importPath": "rest_framework.status",
        "description": "rest_framework.status",
        "isExtraImport": true,
        "detail": "rest_framework.status",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "demo_app.asgi",
        "description": "demo_app.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "demo_app.asgi",
        "documentation": {}
    },
    {
        "label": "ResultsPagination",
        "kind": 6,
        "importPath": "demo_app.pagination",
        "description": "demo_app.pagination",
        "peekOfCode": "class ResultsPagination(PageNumberPagination):\n    page_size = 2\n    page_size_query_param = 'page_size'\n    # max_page_size = 100",
        "detail": "demo_app.pagination",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "demo_app.settings",
        "description": "demo_app.settings",
        "peekOfCode": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get(\"SECRET_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [",
        "detail": "demo_app.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "demo_app.settings",
        "description": "demo_app.settings",
        "peekOfCode": "SECRET_KEY = os.environ.get(\"SECRET_KEY\")\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "demo_app.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "demo_app.settings",
        "description": "demo_app.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "demo_app.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "demo_app.settings",
        "description": "demo_app.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'main',",
        "detail": "demo_app.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "demo_app.settings",
        "description": "demo_app.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'main',\n    'rest_framework',\n    'rest_framework.authtoken',",
        "detail": "demo_app.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "demo_app.settings",
        "description": "demo_app.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n     'whitenoise.middleware.WhiteNoiseMiddleware',\n]",
        "detail": "demo_app.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "demo_app.settings",
        "description": "demo_app.settings",
        "peekOfCode": "ROOT_URLCONF = 'demo_app.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "demo_app.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "demo_app.settings",
        "description": "demo_app.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "demo_app.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "demo_app.settings",
        "description": "demo_app.settings",
        "peekOfCode": "WSGI_APPLICATION = 'demo_app.wsgi.application'\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.TokenAuthentication',\n    ],\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 2,\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.IsAuthenticated',\n    ),",
        "detail": "demo_app.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "demo_app.settings",
        "description": "demo_app.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.TokenAuthentication',\n    ],\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 2,\n    'DEFAULT_PERMISSION_CLASSES': (\n        'rest_framework.permissions.IsAuthenticated',\n    ),\n}",
        "detail": "demo_app.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "demo_app.settings",
        "description": "demo_app.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "demo_app.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "demo_app.settings",
        "description": "demo_app.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "demo_app.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "demo_app.settings",
        "description": "demo_app.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'users.OKUser'\n# Internationalization\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'",
        "detail": "demo_app.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "demo_app.settings",
        "description": "demo_app.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATIC_URL = '/static/'\n# Extra places for collectstatic to find static files.",
        "detail": "demo_app.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "demo_app.settings",
        "description": "demo_app.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATIC_URL = '/static/'\n# Extra places for collectstatic to find static files.\nSTATICFILES_DIRS = (",
        "detail": "demo_app.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "demo_app.settings",
        "description": "demo_app.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATIC_URL = '/static/'\n# Extra places for collectstatic to find static files.\nSTATICFILES_DIRS = (\n    os.path.join(BASE_DIR, 'static'),",
        "detail": "demo_app.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "demo_app.settings",
        "description": "demo_app.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATIC_URL = '/static/'\n# Extra places for collectstatic to find static files.\nSTATICFILES_DIRS = (\n    os.path.join(BASE_DIR, 'static'),\n)",
        "detail": "demo_app.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_STORAGE",
        "kind": 5,
        "importPath": "demo_app.settings",
        "description": "demo_app.settings",
        "peekOfCode": "STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATIC_URL = '/static/'\n# Extra places for collectstatic to find static files.\nSTATICFILES_DIRS = (\n    os.path.join(BASE_DIR, 'static'),\n)\n###### HEROKU CONFIGURATION STARTS HERE ###################\nif 'DATABASE_URL' in os.environ:\n    DATABASES['default'] = dj_database_url.config()",
        "detail": "demo_app.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "demo_app.settings",
        "description": "demo_app.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATIC_URL = '/static/'\n# Extra places for collectstatic to find static files.\nSTATICFILES_DIRS = (\n    os.path.join(BASE_DIR, 'static'),\n)\n###### HEROKU CONFIGURATION STARTS HERE ###################\nif 'DATABASE_URL' in os.environ:\n    DATABASES['default'] = dj_database_url.config()\n    DEBUG = False",
        "detail": "demo_app.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "demo_app.settings",
        "description": "demo_app.settings",
        "peekOfCode": "STATIC_URL = '/static/'\n# Extra places for collectstatic to find static files.\nSTATICFILES_DIRS = (\n    os.path.join(BASE_DIR, 'static'),\n)\n###### HEROKU CONFIGURATION STARTS HERE ###################\nif 'DATABASE_URL' in os.environ:\n    DATABASES['default'] = dj_database_url.config()\n    DEBUG = False\n    SESSION_EXPIRE_AT_BROWSER_CLOSE = True",
        "detail": "demo_app.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "demo_app.settings",
        "description": "demo_app.settings",
        "peekOfCode": "STATICFILES_DIRS = (\n    os.path.join(BASE_DIR, 'static'),\n)\n###### HEROKU CONFIGURATION STARTS HERE ###################\nif 'DATABASE_URL' in os.environ:\n    DATABASES['default'] = dj_database_url.config()\n    DEBUG = False\n    SESSION_EXPIRE_AT_BROWSER_CLOSE = True\n    SECURE_SSL_REDIRECT = False\n    SESSION_COOKIE_AGE = 60 * 60",
        "detail": "demo_app.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "demo_app.settings",
        "description": "demo_app.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "demo_app.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "demo_app.urls",
        "description": "demo_app.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('main.urls')),\n    path('', include('users.urls')),\n]",
        "detail": "demo_app.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "demo_app.wsgi",
        "description": "demo_app.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "demo_app.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "main.migrations.0001_initial",
        "description": "main.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Post',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=250)),",
        "detail": "main.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "MainConfig",
        "kind": 6,
        "importPath": "main.apps",
        "description": "main.apps",
        "peekOfCode": "class MainConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'main'",
        "detail": "main.apps",
        "documentation": {}
    },
    {
        "label": "PostFormNew",
        "kind": 6,
        "importPath": "main.forms",
        "description": "main.forms",
        "peekOfCode": "class PostFormNew(forms.Form):\n    title = forms.CharField(max_length=250)\n    body = forms.CharField(widget=forms.Textarea)\n    photo_url = forms.CharField(max_length=2000)\nclass TestForm(forms.Form):\n    name = forms.CharField(max_length=100, label='Your name')\n    message = forms.CharField(widget=forms.Textarea)",
        "detail": "main.forms",
        "documentation": {}
    },
    {
        "label": "TestForm",
        "kind": 6,
        "importPath": "main.forms",
        "description": "main.forms",
        "peekOfCode": "class TestForm(forms.Form):\n    name = forms.CharField(max_length=100, label='Your name')\n    message = forms.CharField(widget=forms.Textarea)",
        "detail": "main.forms",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class Post(models.Model):\n    title = models.CharField(max_length=250)\n    body = models.TextField()\n    photo_url = models.CharField(max_length=2000, default='', blank=True, null=True)\n    date_created = models.DateTimeField(auto_now_add = True)\nclass Comment(models.Model):\n    post = models.ForeignKey(Post, related_name=\"my_post\", on_delete=models.CASCADE)\n    comment = models.TextField()\n    date_created = models.DateTimeField(auto_now_add = True)\nclass TestModel(models.Model):",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "Comment",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class Comment(models.Model):\n    post = models.ForeignKey(Post, related_name=\"my_post\", on_delete=models.CASCADE)\n    comment = models.TextField()\n    date_created = models.DateTimeField(auto_now_add = True)\nclass TestModel(models.Model):\n    name = models.CharField(max_length=100, null=True, blank=True)\n    message = models.TextField(null=True, blank=True)",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "TestModel",
        "kind": 6,
        "importPath": "main.models",
        "description": "main.models",
        "peekOfCode": "class TestModel(models.Model):\n    name = models.CharField(max_length=100, null=True, blank=True)\n    message = models.TextField(null=True, blank=True)",
        "detail": "main.models",
        "documentation": {}
    },
    {
        "label": "PostSerializer",
        "kind": 6,
        "importPath": "main.serializers",
        "description": "main.serializers",
        "peekOfCode": "class PostSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Post \n        fields = ('id', 'title', 'body', 'photo_url')",
        "detail": "main.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "main.urls",
        "description": "main.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'posts', PostViewSet, basename='posts')\nurlpatterns = [\n   path('', show_posts),\n   path('posts/', show_posts),\n   path('create_post/', create_new_post),\n   path('login/', login),\n   path('test_form/', test_form),\n   path('api/posts/', PostAPIView.as_view()),\n   path('api/', include(router.urls)),",
        "detail": "main.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "main.urls",
        "description": "main.urls",
        "peekOfCode": "urlpatterns = [\n   path('', show_posts),\n   path('posts/', show_posts),\n   path('create_post/', create_new_post),\n   path('login/', login),\n   path('test_form/', test_form),\n   path('api/posts/', PostAPIView.as_view()),\n   path('api/', include(router.urls)),\n]",
        "detail": "main.urls",
        "documentation": {}
    },
    {
        "label": "PostAPIView",
        "kind": 6,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "class PostAPIView(APIView):\n    def get(self, request):\n        posts = [post.title for post in Post.objects.all()]\n        # for post in Post.objects.all():\n        #     posts.append(post.title)\n        return Response(posts)\n    def post(self, request):\n        title = request.data.get(\"title\")\n        body = request.data.get(\"body\")\n        photo_url = request.data.get(\"photo_url\")",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "PostViewSet",
        "kind": 6,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "class PostViewSet(viewsets.ModelViewSet):\n    @action(methods=[\"POST\"], detail=False)\n    def create_post(self, request):\n        title = request.data.get(\"title\")\n        body = request.data.get(\"body\")\n        photo_url = request.data.get(\"photo_url\")\n        post = Post.objects.create(\n            title = title,\n            body=body,\n            photo_url=photo_url",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def index(request):\n    tests = TestModel.objects.all()\n    return render(request, 'index.html', {'tests': tests})\ndef create_post(request, post):\n    test = TestModel.objects.create(\n        name=post\n    )\n    test.save()\n    return HttpResponse(\"<h1>Post successfully created</h1>\")\ndef show_posts(request):",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "create_post",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def create_post(request, post):\n    test = TestModel.objects.create(\n        name=post\n    )\n    test.save()\n    return HttpResponse(\"<h1>Post successfully created</h1>\")\ndef show_posts(request):\n    posts = Post.objects.all()\n    return render(request,\"posts_list.html\", {\"posts_list\": posts})\ndef create_new_post(request):",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "show_posts",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def show_posts(request):\n    posts = Post.objects.all()\n    return render(request,\"posts_list.html\", {\"posts_list\": posts})\ndef create_new_post(request):\n    form = PostFormNew()\n    message = ''\n    if request.method == 'POST':\n        form = PostFormNew(request.POST)\n        if form.is_valid:\n            print(form)",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "create_new_post",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def create_new_post(request):\n    form = PostFormNew()\n    message = ''\n    if request.method == 'POST':\n        form = PostFormNew(request.POST)\n        if form.is_valid:\n            print(form)\n            title = form.cleaned_data[\"title\"]\n            body = form.cleaned_data[\"body\"]\n            photo_url = form.cleaned_data[\"photo_url\"]",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def login(request):\n    return render(request, \"login.html\")\ndef test_form(request):\n    form = TestForm()\n    reply = ''\n    if request.method == 'POST':\n        form = TestForm(request.POST)\n        if form.is_valid():\n            name = form.cleaned_data[\"name\"]\n            message = form.cleaned_data[\"message\"]",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "test_form",
        "kind": 2,
        "importPath": "main.views",
        "description": "main.views",
        "peekOfCode": "def test_form(request):\n    form = TestForm()\n    reply = ''\n    if request.method == 'POST':\n        form = TestForm(request.POST)\n        if form.is_valid():\n            name = form.cleaned_data[\"name\"]\n            message = form.cleaned_data[\"message\"]\n            testm = TestModel.objects.create(\n                name=name,",
        "detail": "main.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "users.migrations.0001_initial",
        "description": "users.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='OKUser',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('password', models.CharField(max_length=128, verbose_name='password')),",
        "detail": "users.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "users.migrations.0002_okuser_is_staff",
        "description": "users.migrations.0002_okuser_is_staff",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('users', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='okuser',\n            name='is_staff',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "users.migrations.0002_okuser_is_staff",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "users.migrations.0003_alter_okuser_options_remove_okuser_is_staff",
        "description": "users.migrations.0003_alter_okuser_options_remove_okuser_is_staff",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('users', '0002_okuser_is_staff'),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='okuser',\n            options={'ordering': ('id', 'first_name')},\n        ),\n        migrations.RemoveField(",
        "detail": "users.migrations.0003_alter_okuser_options_remove_okuser_is_staff",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "users.migrations.0004_okuser_is_admin",
        "description": "users.migrations.0004_okuser_is_admin",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('users', '0003_alter_okuser_options_remove_okuser_is_staff'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='okuser',\n            name='is_admin',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "users.migrations.0004_okuser_is_admin",
        "documentation": {}
    },
    {
        "label": "UsersConfig",
        "kind": 6,
        "importPath": "users.apps",
        "description": "users.apps",
        "peekOfCode": "class UsersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'users'",
        "detail": "users.apps",
        "documentation": {}
    },
    {
        "label": "OKUserManager",
        "kind": 6,
        "importPath": "users.models",
        "description": "users.models",
        "peekOfCode": "class OKUserManager(BaseUserManager):\n    # This method accepts basic information and create user\n    def create_user(self, email, first_name, last_name, password=None):\n        if not email:\n            raise ValueError('Users must have a email')\n        user = self.model(\n            email=email,\n            first_name=first_name,\n            last_name=last_name\n        )",
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "OKUser",
        "kind": 6,
        "importPath": "users.models",
        "description": "users.models",
        "peekOfCode": "class OKUser(AbstractBaseUser):\n    first_name = models.CharField(max_length=255)\n    last_name = models.CharField(max_length=255)\n    is_active = models.BooleanField(default=True)\n    is_blocked = models.BooleanField(default=False)\n    date_created = models.DateTimeField(auto_now_add=True)\n    date_modified = models.DateTimeField(auto_now=True)\n    email = models.EmailField(verbose_name='Email address', unique=True, max_length=255)\n    username = models.CharField(max_length=255, blank=True, null=True)\n    is_admin = models.BooleanField(default=False)",
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "create_auth_token",
        "kind": 2,
        "importPath": "users.models",
        "description": "users.models",
        "peekOfCode": "def create_auth_token(sender, instance=None, created=False, **kwargs):\n    if created:\n        Token.objects.create(user=instance)",
        "detail": "users.models",
        "documentation": {}
    },
    {
        "label": "AuthOKUserSerializer",
        "kind": 6,
        "importPath": "users.serializers",
        "description": "users.serializers",
        "peekOfCode": "class AuthOKUserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = OKUser \n        fields = ('id', 'auth_token', 'first_name', 'last_name', 'date_created')\nclass OKUserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = OKUser \n        fields = ('id', 'first_name', 'last_name', 'date_created')",
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "OKUserSerializer",
        "kind": 6,
        "importPath": "users.serializers",
        "description": "users.serializers",
        "peekOfCode": "class OKUserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = OKUser \n        fields = ('id', 'first_name', 'last_name', 'date_created')",
        "detail": "users.serializers",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "users.urls",
        "description": "users.urls",
        "peekOfCode": "router = DefaultRouter()\nrouter.register(r'users', UserViewSet, basename='users')\nurlpatterns = [\n   path('api/users/register/', SignupAPIView.as_view()),\n   path('api/', include(router.urls)),\n]",
        "detail": "users.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "users.urls",
        "description": "users.urls",
        "peekOfCode": "urlpatterns = [\n   path('api/users/register/', SignupAPIView.as_view()),\n   path('api/', include(router.urls)),\n]",
        "detail": "users.urls",
        "documentation": {}
    },
    {
        "label": "UserViewSet",
        "kind": 6,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "class UserViewSet(viewsets.ModelViewSet):\n    @action(detail=False, methods=['post'], permission_classes=[AllowAny])\n    def login(self, request):\n        email = request.data.get('email')\n        password = request.data.get('password')\n        if not email:\n            return Response({\"message\": \"Crazy guy!!!, how do you login without email\"}, status=HTTP_400_BAD_REQUEST)\n        if not password:\n            return Response({\"message\": \"Get out!! send me a password\"}, status=HTTP_400_BAD_REQUEST)\n        try:",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "SignupAPIView",
        "kind": 6,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "class SignupAPIView(APIView):\n    permission_classes = (AllowAny,)\n    def post(self, request):\n        first_name = request.data.get('first_name')\n        last_name = request.data.get('last_name')\n        email = request.data.get('email')\n        password = request.data.get('password')\n        if not email or email == '':\n            return Response({\"detail\": \"Please provide valid email\"}, status=400)\n        try:",
        "detail": "users.views",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'demo_app.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]